# This is a Render Blueprint file.
# It defines all the services that make up our application.

services:
  # -----------------
  # The Spring Boot Backend Service
  # -----------------
  - type: web # It's a web service that runs a server
    name: resume-screener-backend
    runtime: java
    repo: https://github.com/DevalacheruvuManasa/AI-Resume-Screener-Backend # <-- EDIT THIS
    plan: free # Use the free instance type
    healthCheckPath: /actuator/health # Optional but recommended: Add spring-boot-starter-actuator to pom.xml for this
    
    # How to build the backend
    buildCommand: "./mvnw clean install" # Use the Maven wrapper to build the JAR
    
    # How to run the backend
    startCommand: "java -jar target/resumescanner-0.0.1-SNAPSHOT.jar" # <-- CHECK YOUR JAR FILE NAME

    # Securely provide our secret keys and configuration
    envVars:
      - key: SERVER_PORT
        value: 10000 # Render provides the port via the PORT env var, but Spring needs this
      - key: SPRING_DATA_MONGODB_URI
        fromSecret: true # We will create this secret in the Render dashboard
      - key: GROQ_API_KEY
        fromSecret: true # We will create this secret in the Render dashboard
      - key: GROQ_API_URL
        value: https://api.groq.com/openai/v1/chat/completions

  # -----------------
  # The React Frontend Service
  # -----------------
  - type: static # It's a static site (HTML, CSS, JS)
    name: resume-screener-frontend
    repo: https://github.com/DevalacheruvuManasa/AI-Resume-Screener-Frontend # <-- EDIT THIS
    plan: free # Use the free instance type

    # How to build the frontend
    buildCommand: "npm install && npm run build"
    
    # Where the built files are located
    publishDir: dist 
    
    # Set the environment variable for the frontend to find the backend
    envVars:
      - key: VITE_API_URL
        fromService:
          type: web
          name: resume-screener-backend
          property: url # This automatically injects the public URL of our backend
          
    # Optional: Set up a rewrite rule for single-page applications
    routes:
      - type: rewrite
        source: /*
        destination: /index.html